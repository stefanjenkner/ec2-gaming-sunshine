AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  MyIp:
    Description: Client IP address in CIDR notation
    Type: String
  KeyPair:
    Description: EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
  LatestAmiIdJammy:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id"

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-instance-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-library-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:ListBucket"
                Resource: !GetAtt LibraryBucket.Arn
              - Effect: Allow
                Action: "s3:*Object"
                Resource: !Join ["/", [!GetAtt LibraryBucket.Arn, "*"]]
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-instance-profile"
      Path: "/"
      Roles:
        - !Ref InstanceRole
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-${AWS::Region}a"
  Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-${AWS::Region}b"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable
  AdminAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-admin"
      GroupDescription: Allow remote admin access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIp
        - IpProtocol: tcp
          FromPort: 47990
          ToPort: 47990
          CidrIp: !Ref MyIp
  GamingAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-player"
      GroupDescription: Allow remote gaming access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 47984
          ToPort: 47989
          CidrIp: !Ref MyIp
        - IpProtocol: tcp
          FromPort: 48010
          ToPort: 48031
          CidrIp: !Ref MyIp
        - IpProtocol: udp
          FromPort: 47998
          ToPort: 48015
          CidrIp: !Ref MyIp
  RemotePlayAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-remote-play"
      GroupDescription: Allow Steam Remote Play
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 27031
          ToPort: 27036
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 27036
          ToPort: 27037
          CidrIp: 0.0.0.0/0
  LaunchTemplateJammySpot:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-jammy-spot"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            SubnetId: !Ref Subnet1
            Groups:
              - !GetAtt AdminAccess.GroupId
              - !GetAtt GamingAccess.GroupId
              - !GetAtt RemotePlayAccess.GroupId
        PrivateDnsNameOptions:
          HostnameType: resource-name
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 20
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        ImageId: !Ref LatestAmiIdJammy
        InstanceType: g4dn.xlarge
        KeyName: !Ref KeyPair
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            InstanceInterruptionBehavior: stop
            SpotInstanceType: persistent
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-instance"
              - Key: Distribution
                Value: Ubuntu
              - Key: Release
                Value: 22.04
              - Key: Codename
                Value: jammy
        UserData: |
          {{ cloud_config["jammy"] }}
  LaunchTemplateJammyOnDemand:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-jammy-on-demand"
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            SubnetId: !Ref Subnet1
            Groups:
              - !GetAtt AdminAccess.GroupId
              - !GetAtt GamingAccess.GroupId
              - !GetAtt RemotePlayAccess.GroupId
        PrivateDnsNameOptions:
          HostnameType: resource-name
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 20
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        ImageId: !Ref LatestAmiIdJammy
        InstanceType: g4dn.xlarge
        KeyName: !Ref KeyPair
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${AWS::StackName}-instance"
              - Key: Distribution
                Value: Ubuntu
              - Key: Release
                Value: 22.04
              - Key: Codename
                Value: jammy
        UserData: |
          {{ cloud_config["jammy"] }}
  LibraryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-library"
  ControllerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub "${AWS::StackName}-controller"
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-start-stop-instances"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "ec2:DescribeInstances"
                Resource: "*"
              - Effect: Allow
                Action: ["ec2:StartInstances", "ec2:StopInstances"]
                Resource: "arn:aws:ec2:*:*:instance/*"
