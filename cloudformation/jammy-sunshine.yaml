AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  MyIp:
    Description: Client IP address in CIDR notation
    Type: String
  KeyPair:
      Description: EC2 Key Pair
      Type: "AWS::EC2::KeyPair::KeyName"

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-instance-role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-library-access'
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 's3:ListBucket'
              Resource: !GetAtt LibraryBucket.Arn
            - Effect: Allow
              Action: 's3:*Object'
              Resource: !Join ['/', [!GetAtt LibraryBucket.Arn, '*']]
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-instance-profile'
      Path: "/"
      Roles:
      - !Ref InstanceRole
  AdminAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-admin-access'
      GroupDescription: Allow remote admin access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIp
  GamingAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-player-access'
      GroupDescription: Allow remote gaming access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 47984
          ToPort: 48031
          CidrIp: !Ref MyIp
        - IpProtocol: udp
          FromPort: 47998
          ToPort: 48015
          CidrIp: !Ref MyIp
  LaunchTemplateSpot:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-spot'
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            SubnetId: subnet-b859bfc3
            Groups:
              - !GetAtt AdminAccessSecurityGroup.GroupId
              - !GetAtt GamingAccessSecurityGroup.GroupId
        PrivateDnsNameOptions:
          HostnameType: resource-name
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 15
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: true
            DeviceName: /dev/sda1
        ImageId: ami-06ce824c157700cd2
        InstanceType: g4dn.xlarge
        KeyName: !Ref KeyPair
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            InstanceInterruptionBehavior: stop
            SpotInstanceType: persistent
        TagSpecifications:
          - ResourceType: instance
            Tags:
              -  Key: Name
                 Value: !Sub '${AWS::StackName}-instance'
        UserData: |
          {{ cloud_config }}
  LibraryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-library'
  ControllerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub '${AWS::StackName}-controller'
      Path: /
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-start-stop-instances'
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 'ec2:DescribeInstances'
              Resource: '*'
            - Effect: Allow
              Action: ['ec2:StartInstances', 'ec2:StopInstances']
              Resource: 'arn:aws:ec2:*:*:instance/*'
Outputs:
  LaunchTemplateId:
    Value: !Ref LaunchTemplateSpot
  LaunchTemplateLatestVersionNumber:
    Value: !GetAtt LaunchTemplateSpot.LatestVersionNumber
