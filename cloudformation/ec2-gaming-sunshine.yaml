AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - 'AWS::LanguageExtensions'
  - 'AWS::Serverless-2016-10-31'

Parameters:
  MyIp:
    Description: Client IP address in CIDR notation
    Type: String
    Default: "127.0.0.1/32"
  KeyPair:
    Description: EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
  HostedZoneName:
    Description: "Optional hosted zone name (e.g.: play.example.com). Leave empty to skip creation."
    Type: String
    Default: ""

Conditions:
  ShouldCreateHostedZone:
    Fn::Not:
      - Fn::Equals:
          - !Ref HostedZoneName
          - ""

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-instance-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedEC2InstanceDefaultPolicy
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-library-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:ListBucket"
                Resource: !GetAtt LibraryBucket.Arn
              - Effect: Allow
                Action: "s3:*Object"
                Resource: !Join ["/", [!GetAtt LibraryBucket.Arn, "*"]]
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-instance-profile"
      Path: "/"
      Roles:
        - !Ref InstanceRole
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"
  Subnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-${AWS::Region}a"
  Subnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-${AWS::Region}b"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"
  VpcInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable
  AdminAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-admin"
      GroupDescription: Allow remote admin access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIp
  GamingAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-player"
      GroupDescription: Allow remote gaming access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 47984
          ToPort: 47989
          CidrIp: !Ref MyIp
        - IpProtocol: tcp
          FromPort: 48010
          ToPort: 48031
          CidrIp: !Ref MyIp
        - IpProtocol: udp
          FromPort: 47998
          ToPort: 48015
          CidrIp: !Ref MyIp
  RemotePlayAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-remote-play"
      GroupDescription: Allow Steam Remote Play
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 27031
          ToPort: 27036
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 27036
          ToPort: 27037
          CidrIp: 0.0.0.0/0
  LibraryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-library"
  ControllerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub "${AWS::StackName}-controller"
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-start-stop-instances"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "ec2:DescribeInstances"
                Resource: "*"
              - Effect: Allow
                Action: ["ec2:StartInstances", "ec2:StopInstances"]
                Resource: "arn:aws:ec2:*:*:instance/*"
  Bookworm:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./launch-templates-bookworm.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        SecurityGroups:
          Fn::Join:
            - ","
            - - !Ref AdminAccess
              - !Ref GamingAccess
              - !Ref RemotePlayAccess
        Subnet: !Ref Subnet1
        KeyPair: !Ref KeyPair
        InstanceProfileArn: !GetAtt InstanceProfile.Arn
  Jammy:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./launch-templates-jammy.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        SecurityGroups:
          Fn::Join:
            - ","
            - - !Ref AdminAccess
              - !Ref GamingAccess
              - !Ref RemotePlayAccess
        Subnet: !Ref Subnet1
        KeyPair: !Ref KeyPair
        InstanceProfileArn: !GetAtt InstanceProfile.Arn
  Noble:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./launch-templates-noble.yaml
      Parameters:
        ParentStackName: !Ref AWS::StackName
        SecurityGroups:
          Fn::Join:
            - ","
            - - !Ref AdminAccess
              - !Ref GamingAccess
              - !Ref RemotePlayAccess
        Subnet: !Ref Subnet1
        KeyPair: !Ref KeyPair
        InstanceProfileArn: !GetAtt InstanceProfile.Arn

  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: ShouldCreateHostedZone
    Properties:
      Name: !Ref HostedZoneName
  OnEc2InstanceStartFunction:
    Type: AWS::Serverless::Function
    Condition: ShouldCreateHostedZone
    Properties:
      FunctionName: !Sub "${AWS::StackName}-on-instance-start"
      CodeUri: ../src/
      Handler: on_ec2_start_function.lambda_handler
      Runtime: python3.13
      Timeout: 15
      Events:
        EC2InstanceStartEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source: [aws.ec2]
              detail-type: [EC2 Instance State-change Notification]
              detail:
                state: [running]
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZone
      Role: !GetAtt OnInstanceStartStopLambdaRole.Arn
  OnInstanceStartStopLambdaRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreateHostedZone
    Properties:
      RoleName: !Sub "${AWS::StackName}-on-start-stop-lambda-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-update-hosted-zone"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - route53:ListHostedZones
                Resource: "*"
              - Effect: Allow
                Action:
                  - route53:ChangeResourceRecordSets
                  - route53:GetHostedZone
                Resource: !Join ["/", ["arn:aws:route53:::hostedzone", !Ref HostedZone]]


Outputs:
  OnDemandLaunchTemplateBookworm:
    Description: On-demand instance launch template (Bookworm)
    Value: !GetAtt Bookworm.Outputs.OnDemandLaunchTemplate
  SpotLaunchTemplateBookworm:
    Description: Spot instance launch template (Bookworm)
    Value: !GetAtt Bookworm.Outputs.SpotLaunchTemplate
  OnDemandLaunchTemplateJammy:
    Description: On-demand instance launch template (Jammy)
    Value: !GetAtt Jammy.Outputs.OnDemandLaunchTemplate
  SpotLaunchTemplateJammy:
    Description: Spot instance launch template (Jammy)
    Value: !GetAtt Jammy.Outputs.SpotLaunchTemplate
  OnDemandLaunchTemplateNoble:
    Description: On-demand instance launch template (Noble)
    Value: !GetAtt Noble.Outputs.OnDemandLaunchTemplate
  SpotLaunchTemplateNoble:
    Description: Spot instance launch template (Noble)
    Value: !GetAtt Noble.Outputs.SpotLaunchTemplate

# vim: ft=yaml.cloudformation
